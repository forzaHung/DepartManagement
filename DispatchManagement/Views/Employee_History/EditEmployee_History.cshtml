@model Dispatch.Employee_HistoryEntity
@{
    ViewBag.Title = "Sửa thông tin lịch sử làm việc của nhân sự";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="row">

    <div class="x_panel">
        <div class="x_title">
            <h2>@ViewBag.Title</h2>
            <ul class="nav navbar-right panel_toolbox">
                <li>
                    <button type="button" class="btn btn-primary" onclick="$('#frmEmp').submit();"><i class="fa fa-save"></i> Lưu</button>
                </li>
                <li>
                    @Html.ActionLink("Danh sách lịch sử nhân sự", "Index", null, new { @id = "createNew", @class = "btn btn-default" })
                </li>

                <li>
                    <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                </li>
            </ul>
            <div class="clearfix"></div>
        </div>
        <div class="x_content">
            <div>
                @using (Html.BeginForm("Save", "Employee_History", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal", role = "form", id = "frmEmp" }))
            {
                    @Html.AntiForgeryToken()
                    <h4>@ViewBag.SubTitle</h4>
                    <p class="red">Vui lòng nhập dữ liệu cho những trường bắt buộc *</p>
                    @Html.HiddenFor(m=>m.EmployeeId)
                    <div class="form-group">
                        @Html.LabelFor(m => m.FirstName, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", @maxlength = "150", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.LastName, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", @maxlength = "250", @readonly= "readonly" })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @*@Html.LabelFor(m => m.EmployeeId, new { @class = "col-md-2 control-label" })*@
                        <label class="col-md-2 control-label">Chức vụ</label>
                        <div class="col-md-10">
                            <select id="Position" name="Position" class="form-control">
                                <option value="0" selected="selected">---Chọn chức vụ---</option>
                                @foreach (var item in (List<Dispatch.PositionEntity>)ViewData["Position"])
                                {
                                    if (item.Id == Model.Position)
                                    {
                                        <option value="@item.Id" selected="selected">@item.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        @*@Html.LabelFor(m => m.EmployeeId, new { @class = "col-md-2 control-label" })*@
                        <label class="col-md-2 control-label">Phòng </label>
                        <div class="col-md-10">
                            <select id="DepartmentId" name="DepartmentId" class="form-control">
                                <option value="0" selected="selected">---Chọn phòng---</option>
                            
                                @foreach (var item in (List<Dispatch.DepartmentEntity>)ViewData["Department"])
                                {
                                    if (item.Id == Model.DepartmentId)
                                    {
                                        <option value="@item.Id" selected="selected">@item.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@item.Id">@item.Name</option>                                        
                                    }
                                }
                            </select>
                        </div>
                    </div>
                   
                    <div class="form-group">
                        @Html.LabelFor(m => m.TimeIn, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.TimeIn, new { @class = "form-control", @type = "date", @Value = Model.TimeIn.ToString("yyyy-MM-dd"), @style = "max-width:200px" })
                            @Html.ValidationMessageFor(model => model.TimeIn, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.TimeOut, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.TimeOut, new { @class = "form-control", @type = "date", @Value = Model.TimeIn.ToString("yyyy-MM-dd"), @style = "max-width:200px" })
                            @Html.ValidationMessageFor(model => model.TimeOut, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                      @Html.LabelFor(m => m.Note, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(m => m.Note, new { @id = "TxtNote", @class = "form-control", @style = "height:100px" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="hidden" class="form-control" id="Id" name="Id" value="@Model.Id" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>

        $('#FileRemove').on('click', function (e) {
            $('#UploadFile').show(200);
            $('#filename').hide(200);
            $("#upload").hide(200);
        });
    </script>

    <script src="~/Assets/plugins/ckeditor/ckeditor.js"></script>
    <script type="text/javascript">
        var editor = CKEDITOR.replace("TxtNote", {
            height: 200,
            allowedContent: true,
            removePlugins: 'showblocks',
            filebrowserBrowseUrl: '/Assets/plugins/ckfinder/ckfinder.html',
            filebrowserImageBrowseUrl: '/Assets/plugins/ckfinder/ckfinder.html?type=Images',
            filebrowserFlashBrowseUrl: '/Assets/plugins/ckfinder/ckfinder.html?type=Flash',
            filebrowserUploadUrl: '/Assets/plugins/ckfinder/core/connector/aspx/connector.aspx?command=QuickUpload&type=Files',
            filebrowserImageUploadUrl: '/Assets/plugins/ckfinder/core/connector/aspx/connector.aspx?command=QuickUpload&type=Images',
            filebrowserFlashUploadUrl: '/Assets/plugins/ckfinder/core/connector/aspx/connector.aspx?command=QuickUpload&type=Flash',
            filebrowserWindowWidth: '1000',
            filebrowserWindowHeight: '200',

        });
        editor.on('instanceReady', function (ev) {
            var editor = ev.editor,
                dataProcessor = editor.dataProcessor,
                htmlFilter = dataProcessor && dataProcessor.htmlFilter;
            htmlFilter.addRules({
                elements: {
                    img: function (element) {

                        var src = element.attributes.src;
                        var imgsrc = src;
                        var tmpSrc = src.split('/Uploads');
                        var domain = "";
                        if (tmpSrc[0] != domain) {
                            $.ajax({
                                type: "POST",
                                url: "/Backend/Handler/DownloadImageFromUrl",
                                data: { imageUrl: src },
                                async: false,
                                beforeSend: function () {
                                    commonBase.startLoading();
                                },
                                success: function (r) {
                                    commonBase.stopLoading();
                                    imgsrc = r.fileName;
                                },
                                error: function () {
                                    commonBase.stopLoading();
                                }
                            });
                            imgsrc = imgsrc.replace(/\\/g, '/');
                            element.attributes.src = imgsrc;
                            element.attributes['data-cke-saved-src'] = domain + imgsrc;
                            element.attributes.rel = domain + imgsrc;
                        }
                    }
                }
            });
        });
    </script>
    
}
